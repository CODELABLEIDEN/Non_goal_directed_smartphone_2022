{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9f14ea5c",
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "import random\n",
    "import h5py\n",
    "import copy\n",
    "import os \n",
    "import numpy as np\n",
    "import keras\n",
    "import tensorflow as tf\n",
    "from sklearn import metrics\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e7cbae16",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2 Physical GPUs, 2 Logical GPUs\n"
     ]
    }
   ],
   "source": [
    "gpus = tf.config.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "  try:\n",
    "    # Currently, memory growth needs to be the same across GPUs\n",
    "    for gpu in gpus:\n",
    "      tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    logical_gpus = tf.config.experimental.list_logical_devices('GPU')\n",
    "    print(len(gpus), \"Physical GPUs,\", len(logical_gpus), \"Logical GPUs\")\n",
    "  except RuntimeError as e:\n",
    "    # Memory growth must be set before GPUs have been initialized\n",
    "    print(e)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "af45e3b8",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_data(filename, feature):\n",
    "    \"\"\"\n",
    "    Read data from hdf5 file \n",
    "    Create a list of the lowest level keys, the name of the data files \n",
    "    Return both data and list\n",
    "    \"\"\"\n",
    "    data = h5py.File(filename, \"r\")\n",
    "    files = []\n",
    "    participants = []\n",
    "    for participant in data:\n",
    "        keys = list(data[participant].keys())\n",
    "        participants.append(participant)\n",
    "        for i in range(round(len(keys)/3)):\n",
    "        #for i in range(round(3/3)):\n",
    "            files.append((f'{participant}/{[s for s in keys if feature in s][i]}',f'{participant}/{[s for s in keys if \"phone\" in s][i]}'))\n",
    "    return (data,files,participants)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "9b207f42",
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_lstm(timesteps,num_features_bs):\n",
    "    \"\"\" Generate model architecture (used during training) \"\"\"\n",
    "    input_layer = keras.Input((timesteps,num_features_bs))\n",
    "    features_3 = keras.layers.Concatenate()([keras.layers.Conv1D(1, i, padding='same')(input_layer) for i in range(1,100)]) \n",
    "    lstm1 = keras.layers.Bidirectional(keras.layers.LSTM(128, return_sequences=True))(features_3)\n",
    "    drop_1 = keras.layers.Dropout(0.5)(lstm1)\n",
    "    lstm2 = keras.layers.Bidirectional(keras.layers.LSTM(128, return_sequences=True))(drop_1)\n",
    "    drop_2 = keras.layers.Dropout(0.5)(lstm2)\n",
    "    lstm3 = keras.layers.Bidirectional(keras.layers.LSTM(128, return_sequences=True))(drop_2)\n",
    "    drop_3 = keras.layers.Dropout(0.5)(lstm3)\n",
    "    out = keras.layers.Dense(1, activation='sigmoid')(drop_3)\n",
    "\n",
    "    model = keras.Model(input_layer, [out])\n",
    "\n",
    "    rms_prob_optimizer = tf.keras.optimizers.RMSprop(learning_rate=0.0001)\n",
    "    #model.summary()\n",
    "    #model.compile(loss='mse', optimizer=keras.optimizers.RMSprop(1e-4),  metrics=['accuracy','TruePositives', 'TrueNegatives', 'FalsePositives', 'FalseNegatives'])\n",
    "    model.compile(loss='binary_crossentropy', optimizer=rms_prob_optimizer,  metrics=['accuracy','TruePositives', 'TrueNegatives', 'FalsePositives', 'FalseNegatives'])\n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "2c510c86",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model\"\n",
      "__________________________________________________________________________________________________\n",
      "Layer (type)                    Output Shape         Param #     Connected to                     \n",
      "==================================================================================================\n",
      "input_1 (InputLayer)            [(None, 200, 1)]     0                                            \n",
      "__________________________________________________________________________________________________\n",
      "conv1d (Conv1D)                 (None, 200, 1)       2           input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_1 (Conv1D)               (None, 200, 1)       3           input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_2 (Conv1D)               (None, 200, 1)       4           input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_3 (Conv1D)               (None, 200, 1)       5           input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_4 (Conv1D)               (None, 200, 1)       6           input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_5 (Conv1D)               (None, 200, 1)       7           input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_6 (Conv1D)               (None, 200, 1)       8           input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_7 (Conv1D)               (None, 200, 1)       9           input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_8 (Conv1D)               (None, 200, 1)       10          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_9 (Conv1D)               (None, 200, 1)       11          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_10 (Conv1D)              (None, 200, 1)       12          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_11 (Conv1D)              (None, 200, 1)       13          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_12 (Conv1D)              (None, 200, 1)       14          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_13 (Conv1D)              (None, 200, 1)       15          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_14 (Conv1D)              (None, 200, 1)       16          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_15 (Conv1D)              (None, 200, 1)       17          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_16 (Conv1D)              (None, 200, 1)       18          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_17 (Conv1D)              (None, 200, 1)       19          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_18 (Conv1D)              (None, 200, 1)       20          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_19 (Conv1D)              (None, 200, 1)       21          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_20 (Conv1D)              (None, 200, 1)       22          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_21 (Conv1D)              (None, 200, 1)       23          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_22 (Conv1D)              (None, 200, 1)       24          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_23 (Conv1D)              (None, 200, 1)       25          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_24 (Conv1D)              (None, 200, 1)       26          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_25 (Conv1D)              (None, 200, 1)       27          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_26 (Conv1D)              (None, 200, 1)       28          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_27 (Conv1D)              (None, 200, 1)       29          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_28 (Conv1D)              (None, 200, 1)       30          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_29 (Conv1D)              (None, 200, 1)       31          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_30 (Conv1D)              (None, 200, 1)       32          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_31 (Conv1D)              (None, 200, 1)       33          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_32 (Conv1D)              (None, 200, 1)       34          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_33 (Conv1D)              (None, 200, 1)       35          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_34 (Conv1D)              (None, 200, 1)       36          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_35 (Conv1D)              (None, 200, 1)       37          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_36 (Conv1D)              (None, 200, 1)       38          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_37 (Conv1D)              (None, 200, 1)       39          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_38 (Conv1D)              (None, 200, 1)       40          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_39 (Conv1D)              (None, 200, 1)       41          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_40 (Conv1D)              (None, 200, 1)       42          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_41 (Conv1D)              (None, 200, 1)       43          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_42 (Conv1D)              (None, 200, 1)       44          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_43 (Conv1D)              (None, 200, 1)       45          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_44 (Conv1D)              (None, 200, 1)       46          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_45 (Conv1D)              (None, 200, 1)       47          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_46 (Conv1D)              (None, 200, 1)       48          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_47 (Conv1D)              (None, 200, 1)       49          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_48 (Conv1D)              (None, 200, 1)       50          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_49 (Conv1D)              (None, 200, 1)       51          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_50 (Conv1D)              (None, 200, 1)       52          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_51 (Conv1D)              (None, 200, 1)       53          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_52 (Conv1D)              (None, 200, 1)       54          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_53 (Conv1D)              (None, 200, 1)       55          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_54 (Conv1D)              (None, 200, 1)       56          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_55 (Conv1D)              (None, 200, 1)       57          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_56 (Conv1D)              (None, 200, 1)       58          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_57 (Conv1D)              (None, 200, 1)       59          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_58 (Conv1D)              (None, 200, 1)       60          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_59 (Conv1D)              (None, 200, 1)       61          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_60 (Conv1D)              (None, 200, 1)       62          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_61 (Conv1D)              (None, 200, 1)       63          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_62 (Conv1D)              (None, 200, 1)       64          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_63 (Conv1D)              (None, 200, 1)       65          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_64 (Conv1D)              (None, 200, 1)       66          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_65 (Conv1D)              (None, 200, 1)       67          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_66 (Conv1D)              (None, 200, 1)       68          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_67 (Conv1D)              (None, 200, 1)       69          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_68 (Conv1D)              (None, 200, 1)       70          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_69 (Conv1D)              (None, 200, 1)       71          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_70 (Conv1D)              (None, 200, 1)       72          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_71 (Conv1D)              (None, 200, 1)       73          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_72 (Conv1D)              (None, 200, 1)       74          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_73 (Conv1D)              (None, 200, 1)       75          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_74 (Conv1D)              (None, 200, 1)       76          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_75 (Conv1D)              (None, 200, 1)       77          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_76 (Conv1D)              (None, 200, 1)       78          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_77 (Conv1D)              (None, 200, 1)       79          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_78 (Conv1D)              (None, 200, 1)       80          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_79 (Conv1D)              (None, 200, 1)       81          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_80 (Conv1D)              (None, 200, 1)       82          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_81 (Conv1D)              (None, 200, 1)       83          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_82 (Conv1D)              (None, 200, 1)       84          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_83 (Conv1D)              (None, 200, 1)       85          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_84 (Conv1D)              (None, 200, 1)       86          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_85 (Conv1D)              (None, 200, 1)       87          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_86 (Conv1D)              (None, 200, 1)       88          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_87 (Conv1D)              (None, 200, 1)       89          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_88 (Conv1D)              (None, 200, 1)       90          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_89 (Conv1D)              (None, 200, 1)       91          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_90 (Conv1D)              (None, 200, 1)       92          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_91 (Conv1D)              (None, 200, 1)       93          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_92 (Conv1D)              (None, 200, 1)       94          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_93 (Conv1D)              (None, 200, 1)       95          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_94 (Conv1D)              (None, 200, 1)       96          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_95 (Conv1D)              (None, 200, 1)       97          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_96 (Conv1D)              (None, 200, 1)       98          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_97 (Conv1D)              (None, 200, 1)       99          input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_98 (Conv1D)              (None, 200, 1)       100         input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "concatenate (Concatenate)       (None, 200, 99)      0           conv1d[0][0]                     \n",
      "                                                                 conv1d_1[0][0]                   \n",
      "                                                                 conv1d_2[0][0]                   \n",
      "                                                                 conv1d_3[0][0]                   \n",
      "                                                                 conv1d_4[0][0]                   \n",
      "                                                                 conv1d_5[0][0]                   \n",
      "                                                                 conv1d_6[0][0]                   \n",
      "                                                                 conv1d_7[0][0]                   \n",
      "                                                                 conv1d_8[0][0]                   \n",
      "                                                                 conv1d_9[0][0]                   \n",
      "                                                                 conv1d_10[0][0]                  \n",
      "                                                                 conv1d_11[0][0]                  \n",
      "                                                                 conv1d_12[0][0]                  \n",
      "                                                                 conv1d_13[0][0]                  \n",
      "                                                                 conv1d_14[0][0]                  \n",
      "                                                                 conv1d_15[0][0]                  \n",
      "                                                                 conv1d_16[0][0]                  \n",
      "                                                                 conv1d_17[0][0]                  \n",
      "                                                                 conv1d_18[0][0]                  \n",
      "                                                                 conv1d_19[0][0]                  \n",
      "                                                                 conv1d_20[0][0]                  \n",
      "                                                                 conv1d_21[0][0]                  \n",
      "                                                                 conv1d_22[0][0]                  \n",
      "                                                                 conv1d_23[0][0]                  \n",
      "                                                                 conv1d_24[0][0]                  \n",
      "                                                                 conv1d_25[0][0]                  \n",
      "                                                                 conv1d_26[0][0]                  \n",
      "                                                                 conv1d_27[0][0]                  \n",
      "                                                                 conv1d_28[0][0]                  \n",
      "                                                                 conv1d_29[0][0]                  \n",
      "                                                                 conv1d_30[0][0]                  \n",
      "                                                                 conv1d_31[0][0]                  \n",
      "                                                                 conv1d_32[0][0]                  \n",
      "                                                                 conv1d_33[0][0]                  \n",
      "                                                                 conv1d_34[0][0]                  \n",
      "                                                                 conv1d_35[0][0]                  \n",
      "                                                                 conv1d_36[0][0]                  \n",
      "                                                                 conv1d_37[0][0]                  \n",
      "                                                                 conv1d_38[0][0]                  \n",
      "                                                                 conv1d_39[0][0]                  \n",
      "                                                                 conv1d_40[0][0]                  \n",
      "                                                                 conv1d_41[0][0]                  \n",
      "                                                                 conv1d_42[0][0]                  \n",
      "                                                                 conv1d_43[0][0]                  \n",
      "                                                                 conv1d_44[0][0]                  \n",
      "                                                                 conv1d_45[0][0]                  \n",
      "                                                                 conv1d_46[0][0]                  \n",
      "                                                                 conv1d_47[0][0]                  \n",
      "                                                                 conv1d_48[0][0]                  \n",
      "                                                                 conv1d_49[0][0]                  \n",
      "                                                                 conv1d_50[0][0]                  \n",
      "                                                                 conv1d_51[0][0]                  \n",
      "                                                                 conv1d_52[0][0]                  \n",
      "                                                                 conv1d_53[0][0]                  \n",
      "                                                                 conv1d_54[0][0]                  \n",
      "                                                                 conv1d_55[0][0]                  \n",
      "                                                                 conv1d_56[0][0]                  \n",
      "                                                                 conv1d_57[0][0]                  \n",
      "                                                                 conv1d_58[0][0]                  \n",
      "                                                                 conv1d_59[0][0]                  \n",
      "                                                                 conv1d_60[0][0]                  \n",
      "                                                                 conv1d_61[0][0]                  \n",
      "                                                                 conv1d_62[0][0]                  \n",
      "                                                                 conv1d_63[0][0]                  \n",
      "                                                                 conv1d_64[0][0]                  \n",
      "                                                                 conv1d_65[0][0]                  \n",
      "                                                                 conv1d_66[0][0]                  \n",
      "                                                                 conv1d_67[0][0]                  \n",
      "                                                                 conv1d_68[0][0]                  \n",
      "                                                                 conv1d_69[0][0]                  \n",
      "                                                                 conv1d_70[0][0]                  \n",
      "                                                                 conv1d_71[0][0]                  \n",
      "                                                                 conv1d_72[0][0]                  \n",
      "                                                                 conv1d_73[0][0]                  \n",
      "                                                                 conv1d_74[0][0]                  \n",
      "                                                                 conv1d_75[0][0]                  \n",
      "                                                                 conv1d_76[0][0]                  \n",
      "                                                                 conv1d_77[0][0]                  \n",
      "                                                                 conv1d_78[0][0]                  \n",
      "                                                                 conv1d_79[0][0]                  \n",
      "                                                                 conv1d_80[0][0]                  \n",
      "                                                                 conv1d_81[0][0]                  \n",
      "                                                                 conv1d_82[0][0]                  \n",
      "                                                                 conv1d_83[0][0]                  \n",
      "                                                                 conv1d_84[0][0]                  \n",
      "                                                                 conv1d_85[0][0]                  \n",
      "                                                                 conv1d_86[0][0]                  \n",
      "                                                                 conv1d_87[0][0]                  \n",
      "                                                                 conv1d_88[0][0]                  \n",
      "                                                                 conv1d_89[0][0]                  \n",
      "                                                                 conv1d_90[0][0]                  \n",
      "                                                                 conv1d_91[0][0]                  \n",
      "                                                                 conv1d_92[0][0]                  \n",
      "                                                                 conv1d_93[0][0]                  \n",
      "                                                                 conv1d_94[0][0]                  \n",
      "                                                                 conv1d_95[0][0]                  \n",
      "                                                                 conv1d_96[0][0]                  \n",
      "                                                                 conv1d_97[0][0]                  \n",
      "                                                                 conv1d_98[0][0]                  \n",
      "__________________________________________________________________________________________________\n",
      "bidirectional (Bidirectional)   (None, 200, 256)     233472      concatenate[0][0]                \n",
      "__________________________________________________________________________________________________\n",
      "dropout (Dropout)               (None, 200, 256)     0           bidirectional[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "bidirectional_1 (Bidirectional) (None, 200, 256)     394240      dropout[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "dropout_1 (Dropout)             (None, 200, 256)     0           bidirectional_1[0][0]            \n",
      "__________________________________________________________________________________________________\n",
      "bidirectional_2 (Bidirectional) (None, 200, 256)     394240      dropout_1[0][0]                  \n",
      "__________________________________________________________________________________________________\n",
      "dropout_2 (Dropout)             (None, 200, 256)     0           bidirectional_2[0][0]            \n",
      "__________________________________________________________________________________________________\n",
      "dense (Dense)                   (None, 200, 1)       257         dropout_2[0][0]                  \n",
      "==================================================================================================\n",
      "Total params: 1,027,258\n",
      "Trainable params: 1,027,258\n",
      "Non-trainable params: 0\n",
      "__________________________________________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b12d0076",
   "metadata": {},
   "outputs": [],
   "source": [
    "filename = '../../../../non_attribute_movement_and_EEG/data/training_and_prediction_data/features_files_24_06_21_17_40.h5'\n",
    "# path of predictions to be saved\n",
    "filename_2 = '/non_attribute_movement_and_EEG/data/training_and_prediction_data/practice.h5'\n",
    "# path to trained model weight files\n",
    "path_saved_models = '../../../../master_thesis_IS-DS/models/bs_to_tap_models_6/'\n",
    "\n",
    "# get path to all participant folders\n",
    "subfolders = [x[0] for x in os.walk(path_saved_models)]\n",
    "participants_folder_names = [s for s in subfolders if '.ipynb_checkpoints' not in s][1:len(subfolders)]\n",
    "participants_folder_names.sort()\n",
    "\n",
    "timesteps=200\n",
    "num_features_bs=1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "0ffb90f8",
   "metadata": {},
   "outputs": [],
   "source": [
    "participants_folder_names  = [s for s in participants_folder_names if 'DS02' in s]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "dd0b7ace",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DS02\n",
      "deltas\n",
      "y_test original (60200, 1)\n",
      "y_test reshape: (301, 200, 1)\n",
      "x_test original (60200, 1)\n",
      "x_test reshape: (301, 200, 1)\n"
     ]
    },
    {
     "ename": "UnknownError",
     "evalue": " Failed to get convolution algorithm. This is probably because cuDNN failed to initialize, so try looking to see if a warning log message was printed above.\n\t [[node model/conv1d/conv1d (defined at <ipython-input-7-42331b7e894a>:40) ]] [Op:__inference_predict_function_10248]\n\nFunction call stack:\npredict_function\n",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mUnknownError\u001b[0m                              Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-7-42331b7e894a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     38\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     39\u001b[0m             \u001b[0;31m# generate model predictions\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 40\u001b[0;31m             \u001b[0myhat\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     41\u001b[0m             \u001b[0myhat_reshaped\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0myhat\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0myhat\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0myhat\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     42\u001b[0m             \u001b[0myhat_reshaped\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0myhat_reshaped\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0myhat_reshaped\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0mpadding_length\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/master-thesis/lib/python3.6/site-packages/tensorflow/python/keras/engine/training.py\u001b[0m in \u001b[0;36m_method_wrapper\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m     86\u001b[0m       raise ValueError('{} is not supported in multi-worker mode.'.format(\n\u001b[1;32m     87\u001b[0m           method.__name__))\n\u001b[0;32m---> 88\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     89\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     90\u001b[0m   return tf_decorator.make_decorator(\n",
      "\u001b[0;32m~/anaconda3/envs/master-thesis/lib/python3.6/site-packages/tensorflow/python/keras/engine/training.py\u001b[0m in \u001b[0;36mpredict\u001b[0;34m(self, x, batch_size, verbose, steps, callbacks, max_queue_size, workers, use_multiprocessing)\u001b[0m\n\u001b[1;32m   1266\u001b[0m           \u001b[0;32mfor\u001b[0m \u001b[0mstep\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mdata_handler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msteps\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1267\u001b[0m             \u001b[0mcallbacks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_predict_batch_begin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1268\u001b[0;31m             \u001b[0mtmp_batch_outputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpredict_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1269\u001b[0m             \u001b[0;31m# Catch OutOfRangeError for Datasets of unknown size.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1270\u001b[0m             \u001b[0;31m# This blocks until the batch has finished executing.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/master-thesis/lib/python3.6/site-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    578\u001b[0m         \u001b[0mxla_context\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mExit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    579\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 580\u001b[0;31m       \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    581\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    582\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mtracing_count\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_tracing_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/master-thesis/lib/python3.6/site-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m_call\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    648\u001b[0m               *args, **kwds)\n\u001b[1;32m    649\u001b[0m       \u001b[0;31m# If we did not create any variables the trace we have is good enough.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 650\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_concrete_stateful_fn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_filtered_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcanon_args\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcanon_kwds\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# pylint: disable=protected-access\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    651\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    652\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mfn_with_cond\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minner_args\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0minner_kwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/master-thesis/lib/python3.6/site-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m_filtered_call\u001b[0;34m(self, args, kwargs)\u001b[0m\n\u001b[1;32m   1663\u001b[0m          if isinstance(t, (ops.Tensor,\n\u001b[1;32m   1664\u001b[0m                            resource_variable_ops.BaseResourceVariable))),\n\u001b[0;32m-> 1665\u001b[0;31m         self.captured_inputs)\n\u001b[0m\u001b[1;32m   1666\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1667\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m_call_flat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcaptured_inputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcancellation_manager\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/master-thesis/lib/python3.6/site-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m_call_flat\u001b[0;34m(self, args, captured_inputs, cancellation_manager)\u001b[0m\n\u001b[1;32m   1744\u001b[0m       \u001b[0;31m# No tape is watching; skip to running the function.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1745\u001b[0m       return self._build_call_outputs(self._inference_function.call(\n\u001b[0;32m-> 1746\u001b[0;31m           ctx, args, cancellation_manager=cancellation_manager))\n\u001b[0m\u001b[1;32m   1747\u001b[0m     forward_backward = self._select_forward_and_backward_functions(\n\u001b[1;32m   1748\u001b[0m         \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/master-thesis/lib/python3.6/site-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36mcall\u001b[0;34m(self, ctx, args, cancellation_manager)\u001b[0m\n\u001b[1;32m    596\u001b[0m               \u001b[0minputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    597\u001b[0m               \u001b[0mattrs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mattrs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 598\u001b[0;31m               ctx=ctx)\n\u001b[0m\u001b[1;32m    599\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    600\u001b[0m           outputs = execute.execute_with_cancellation(\n",
      "\u001b[0;32m~/anaconda3/envs/master-thesis/lib/python3.6/site-packages/tensorflow/python/eager/execute.py\u001b[0m in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     58\u001b[0m     \u001b[0mctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mensure_initialized\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     59\u001b[0m     tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n\u001b[0;32m---> 60\u001b[0;31m                                         inputs, attrs, num_outputs)\n\u001b[0m\u001b[1;32m     61\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     62\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mname\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mUnknownError\u001b[0m:  Failed to get convolution algorithm. This is probably because cuDNN failed to initialize, so try looking to see if a warning log message was printed above.\n\t [[node model/conv1d/conv1d (defined at <ipython-input-7-42331b7e894a>:40) ]] [Op:__inference_predict_function_10248]\n\nFunction call stack:\npredict_function\n"
     ]
    }
   ],
   "source": [
    "# predict for all participants\n",
    "for p_path in participants_folder_names:\n",
    "    participant = p_path.split('/')[-1]\n",
    "    print(participant)\n",
    "\n",
    "    # predict for both integral and delta features\n",
    "    deltas_model_path = f'{p_path}/{participant}_deltas.h5'\n",
    "    integrals_model_path = f'{p_path}/{participant}_integrals.h5'\n",
    "    features_dict = {'deltas': deltas_model_path, 'integral': integrals_model_path}\n",
    "    for feature in list(features_dict.keys()):\n",
    "        print(feature)\n",
    "\n",
    "        # initialize model and load model weights\n",
    "        model = create_lstm(timesteps,num_features_bs)\n",
    "        model.load_weights(features_dict[feature])\n",
    "\n",
    "        # get participant datasets in right format for prediction (same format used for training)\n",
    "        # the datasets were generated in small windows, predict \n",
    "        data, files, participants = get_data(filename, feature)\n",
    "        files_p = [s for s in files if participant in s[0]]\n",
    "        for j in range(len(files_p)):\n",
    "            participant_file = files_p[j][0].split('/')[1].split('_')\n",
    "            participant_bottom = f'{participant_file[0]}_{participant_file[1]}_{participant_file[2]}'\n",
    "\n",
    "            # reshape data in right format for prediction\n",
    "            bs_array_std = np.transpose(data[files_p[j][0]])\n",
    "            fs_array_std = np.transpose(data[files_p[j][1]])\n",
    "            padding_length = timesteps-(np.shape(fs_array_std)[0]%timesteps)\n",
    "            y_test = np.concatenate([fs_array_std, np.zeros((padding_length,1))])\n",
    "            print(f\"y_test original {y_test.shape}\")\n",
    "            y_test = y_test.reshape(round((np.shape(y_test)[0]-(np.shape(y_test)[0]%timesteps))/timesteps),timesteps,1)\n",
    "            print(f\"y_test reshape: {y_test.shape}\")\n",
    "\n",
    "            X_test = np.concatenate([bs_array_std, np.zeros((padding_length,1))])\n",
    "            print(f\"x_test original {X_test.shape}\")\n",
    "            X_test = X_test.reshape(round((np.shape(X_test)[0]-(np.shape(X_test)[0]%timesteps))/timesteps),timesteps,1)\n",
    "            print(f\"x_test reshape: {X_test.shape}\")\n",
    "\n",
    "            # generate model predictions \n",
    "            yhat = model.predict(X_test, verbose=2)\n",
    "            yhat_reshaped = yhat.reshape((np.shape(yhat)[0]*np.shape(yhat)[1]),1)\n",
    "            yhat_reshaped = yhat_reshaped[:len(yhat_reshaped)-padding_length]\n",
    "            print(f\"y_hat shape {yhat_reshaped.shape}\")\n",
    "\n",
    "            # calculate the precision, recall to find optimal f2 score \n",
    "            precision, recall, thresholds = metrics.precision_recall_curve(fs_array_std, yhat_reshaped)\n",
    "            # calculate weighted fscore -fbeta to find the best threshold\n",
    "            beta = 2\n",
    "            f2_scores = ((1+beta**2)*precision*recall)/(beta**2 * precision+recall)\n",
    "            # check if there are any f2 scores\n",
    "            if len(f2_scores) > 1 and len(f2_scores) != np.sum(np.isnan(f2_scores)) and len(thresholds) > 1:\n",
    "                optimal_threshold = thresholds[np.nanargmax(f2_scores)]\n",
    "                print('Best threshold: ', optimal_threshold)\n",
    "                print('Best F1-Score: ', np.nanmax(f2_scores))\n",
    "\n",
    "                # save as h5 file\n",
    "                #f = h5py.File(filename_2, 'a')\n",
    "                #f.create_dataset(f'/{participant}/{participant_bottom}_{feature}_predictions', data=yhat_reshaped)\n",
    "                ##f.create_dataset(f'/{participant}/{participant_bottom}_{feature}_f2_scores', data=f2_scores)\n",
    "                #f.create_dataset(f'/{participant}/{participant_bottom}_{feature}_thresholds', data=thresholds)\n",
    "                #f.create_dataset(f'/{participant}/{participant_bottom}_{feature}_best_f2_scores', data=np.nanmax(f2_scores))\n",
    "                #f.create_dataset(f'/{participant}/{participant_bottom}_{feature}_optimal_threshold', data=optimal_threshold)\n",
    "                #f.create_dataset(f'/{participant}/{participant_bottom}_{feature}_BS', data=bs_array_std)\n",
    "                #f.create_dataset(f'/{participant}/{participant_bottom}_{feature}_FS', data=fs_array_std)\n",
    "                #f.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "45ccefb9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
